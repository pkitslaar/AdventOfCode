#ip 3
addi 3 16 3  #  0: jump => ip=17

seti 1 9 5   #  1: r[5] = 1

seti 1 1 4   #  2: r[4] = 1

mulr 5 4 2   #  3: r[2] = r[4]*r[5]
eqrr 2 1 2   #  4: r[2] = r[2] == r[1]
addr 2 3 3   #  5: r[3] = r[2] + 5
             #   if r[2] == r[1]:
             #      jump => ip 7
             #   else:
addi 3 1 3   #  6:  jump => ip 8
addr 5 0 0   #  7: r[0] = r[0] + r[5]
addi 4 1 4   #  8: r[4] = r[4] + 1

gtrr 4 1 2   #  9: r[2] = r[4] > r[1]
addr 3 2 3   # 10: r[3] = r[3] + r[2]
             #  if r[4] > r[1]: 
             #    jump => ip 12
             #  else:
seti 2 3 3   # 11: jump => ip = 3
addi 5 1 5   # 12: r[5] = r[5] + 1
gtrr 5 1 2   # 13: r[2] = r[5] > r[1]
addr 2 3 3   # 14: r[3] = r[3] + r[2]
             #  if r[5] > r[1]:
             #    jump => ip 16
             #  else:
seti 1 4 3   # 15: jump => ip = 2
mulr 3 3 3   # 16: jump => ip = 16*16 => HALT

###
## SETUP Routine
## r[1] and r[2] always start as zero
###
addi 1 2 1   # 17: r[1] = 2
mulr 1 1 1   # 18: r[1] = r[1] * r[1]
mulr 3 1 1   # 19  r[1] = r[1] * 19
muli 1 11 1  # 20: r[1] = r[1] * 11
addi 2 2 2   # 21: r[2] = 2
mulr 2 3 2   # 22: r[2] = r[2] * 22
addi 2 20 2  # 23: r[2] = r[2] + 20
addr 1 2 1   # 24: r[1] = r[1] + r[2]
             # RESULT: r[1] = 900
addr 3 0 3   # 25: r[3] = r[0] + r[3] => jump r[0] forward

             #     if r[0] == 0:
seti 0 4 3   # 26:   r[3] = 0 => jump ip = 1

             #     if r[0] == 1:
setr 3 9 2   # 27:   r[2] = 27
mulr 2 3 2   # 28:   r[2] = r[2] * 28
addr 3 2 2   # 29:   r[2] = r[2] + 29
mulr 3 2 2   # 30:   r[2] = r[2] * 30
muli 2 14 2  # 31:   r[2] = r[2] * 14
mulr 2 3 2   # 32:   r[2] = r[2] * 32
addr 1 2 1   # 33:   r[1] = r[1] + r[2]
             # RESULT: r[1] = 10551300
             # RESULT: r[2] = 10550400
seti 0 6 0   # 34:   r[0] = 0
seti 0 0 3   # 35:   r[3] = 0 => jump ip = 1
